React is a JS library (not a framework) for building user interfaces.
It is used to make single-page applications (SPA) and it also allows us to reuse a component.
React is sometimes also called frontend js framework, but it's a library made by Facebook.

- Instead of manipulating the browser's DOM directly, React creates a virtual DOM in memory and here
it makes necessary changes before making changes in the browser's DOM. Also, React only changes what
needs to be changed and changes them. Virtual DOM is lightweight.

- For testing purposes, we can directly use React in HTML using 3 CDN. First 2 let us write React in
js and the third one (Babel) allows us to write JSX syntax.
This is ok for testing purposes but if we want it for production, then we need to set up a React
environment.

React environment = 
- To create a new react app we can use official way to create react app and for this we need nodejs
npx create-react-app my-react-app
my-react-app is app name. If we want to use latest create-react-app the first we have to uninstall it
npm uninstall -g create-react-app

After the app is created, we can run it using (3000 is the default port)
npm start

- JSX (Javascript XML)
It allows us to write HTML in React and it makes it easier to write and add HTML in React.
Using JSX we can create HTML elements and place them in DOM. As in js we have to createElement()
and then appendChild() to make it work, but using JSX we don't have to do anything like that.
JSX converts HTML tags into react elements.

Without JSX =
React.createElement('h1', {}, 'This is made without JSX')

With JSX = 
<h1>This is made using JSX</h1>

- If we want to write any expressions then we have to use {} and write any expression b/w them.

- We have to wrap HTML code in one Top-level element.
For this we can use <div></div> or we can use fragments <></>
Fragments will prevent us from using/adding any unnecessary extra nodes to the DOM.

- As a JSX rule, elements must be closed properly or else will give the error.

- Because the class word is reserved in JS, we have to use className in JSX for the class attribute.

- if else are not supported inside JSX, so we have to use them outside.
Or else we have to use ternary expressions.

React conditional rendering =
- if statement

function One(){
    return <p>One is selected</p>
}

function Two(){
    return <p>Two is selected</p>
}

function Main(props){
    if (props.num==1){
        return <One />
    }
    return <Two />
}
root.render(<Main num='1' />);

- Logical && operator
function Main(props){
    return(
        <>
            <h1>Selection:</h1>
            {props.num == '1' &&
            <p>One is selected</p>
            }
            {props.num !== '1' &&
            <p>Two is selected</p>
            }
        </>
    )
}
root.render(<Main num='1' />);

- Ternary operator (condition ? true : false)
function One(){
  return <p>One is selected</p>
}

function Two(){
  return <p>Two is selected</p>
}

function Main(props){
  return (
    <>
    {props.num == 1 ? <One /> : <Two />}
    </>
  )
}
root.render(<Main num='1' />);

Strict mode =
If we use strict mode then it will re-render (on which it is used) extra time to find bugs
caused by impure components.
It will also re-run effects extra time to find bugs caused by missing effects cleanup.
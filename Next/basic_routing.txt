In Next.js routing is built-in unlike in React.js where we have to import react-router-dom
dependency. Next.js uses file-system-based routing. Meaning unlike in React.js where we can make
a page just by creating a new file.js, in Next.js we first have to make a folder with the name
that we want to give to that page and then make a file.js with the name page.js. All files that
will open a page in Next.js have the same name page.js, only their folder name is different.

This routing also should be made in the folder "app" which should be present inside the folder
"src". If there is no folder with the name "app" then we can make a routing folder in the "src"
folder.

- There should already be a page with the name "page.js" in the "src" OR "src/app" folder.
This "page.js" is also inside a folder.
As it's a file-based routing, we don't have to import page2 to page1 to navigate from page1 to
page2.

We can also use any react-router-dom library in Next.js because it has its advantages.

Link = 
In React.js where we use "Link" to navigate between pages, in Next.js we use the same "Link" to
navigate b/w pages. This is meant to be used in the navigation bar. It is a declarative action.
Here we are sending "href" as a prop.

import Link from "next/link";

<Link href="/page1">Go to page1</Link>


useRouter =
In React.js where we use "useNavigatin" to redirect to a page, in Next.js we use "useRouter"
to redirect to a page. Not be used in the navigation bar. It is imperative action.

import { useRouter } from "next/navigation";

const route = useRouter();

<button onClick={route.push("/page1")}></button>



Nested routing =
When a page also has different pages under it like in a drop-down menu. There we use Nested
routing. All pages under the main page are connected to the main page.
ex = 
mainpage
mainpage/page1
mainpage/page2
mainpage/page3
Pages page1, page2 and page3 are child pages of the parent page mainpage.

To show these pages we have to use nested routing.
Because Next.js uses file-based routing, we have to make a new folder "page1" inside the
folder "mainpage" and have to make a new file page.js inside this "page1" folder. And
everything else will be handled by the Next.js routing system.

And we can access these child pages like this =

import { useRouter } from "next/navigation";

const route = useRouter();

<button onClick={() => router.push("mainpage/Page1")}>Page1</button>



Common Layout =
If we want a common UI on some or all of our pages then we can do that by using layout.js
file. There is already a file named "layout.js" available in "src/app" folder. This acts
like "index.js" file which we found in React.js. 
This is a single file where all of our files are exported to. And that's why if we make
something in this file, it will be visible/available on all of our pages.
Here we can make the navigation bar. 

Also if we want a common layout/UI in the nested route then we can do the same thing by 
making a "layout.js" file in the main file of our nested route.

app/app > layout.js
          page.js
          login > layout.js
                  page.js
                  student > page.js
                  teacher > page.js


Conditional Layout = 
If we want to show the navigation bar (which we made in layout.js under the app folder)
only on some paths/URLs, then we can use the usePathname hook, to check which path is
currently active and if we want to show a navigation bar or not.

import { usePathname } from "next/navigation";

let pathname = usePathname();

console.log(pathname);

{pathname !== "login/studentlogin" ? navigationBar : null}

Dynamic Routing =
When we don't know the the exact names ahead of time and want to create routes from dynamic
data, we can use dynamic segments that are filled at request time or at build time.
First, we have to create a folder with the name inside [] (square brackets). Inside this
new folder we have to create a file named "page.js", where we have to tell which data
to show when someone uses a particular route from a dynamic route.
We can get a list from an array also

File where we want to show this list 
const listArr = [1,2,3,4,5,6,7];

    {listArr.map((x) => <li key={x} style={{ listStyle: "none" }}>
        <Link style={{ color: "black" }} href={"/" + x}>{x}</Link>
    </li>)}


List file
"use client"
const Page = ({params}) => {
    return <h1>Number: {params.list}</h1>
}

We have to make this "List file" a client file or else we can't access params.
In params.list, list is the folder name that we made inside []



Catch-all segments =
We are now able to access our main and nested URLs.
localhost:3000/first/day
"localhost:3000" = domain or root
first = main URL
day = nested URL

Suppose after day we don't want to make any more nested URLs, in this case, we can use
Catch-all segment. Also if we want to access every URL/route (that we haven't made yet)
written after a route that we already made, we can use a catch-all segment.
Also in a situation where we have to make a lot of pages to access different data,
like for example in a college there will be 6 different lectures daily for 200 days.
We want to show all of these lectures on different pages. To do this, we have to
make 200 different pages, which is not a good practice. 
In this situation, we can also use dynamic routing, but in this if we want to use more
routing or more URLs, then again we have to make more dynamic routing. We will also
face difficulties accessing these dynamic routes.
So, here we have to use a catch-all segment to do it in less time.

We will first make a normal folder which we will access using nested routing.
localhost:3000/lectures
Now we will make a folder which will catch all routes/URL after lectures nested route.
And this folder's name should be wrap around [] and should start with ... 
(like spread operator). [...day]
If we access any URL like
localhost:3000/lectures/1 
just like dynamic routing we can access this "1" using params.
But everything after "1" like
localhost:3000/lectures/1/3
first we have to make dynamic routing for it to access it
Or we can use catch-all segment, where we will still use params, but we will get this
value just like we get values from different index of an array
(Here also just like dynamic routing, we have to make this file as client-side else
won't be able to access params)
params.day[0] = 1
params.day[1] = 3

And if we write some other route or URL after "3" in localhost:3000/lectures/1/3
we can access it with
params.day[2]

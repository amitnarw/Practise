Rendering simply means converting our code into HTML/UI.
Just like in C/C++ where we compile our program to get results, in JS and JS-related programs
we get HTML/UI.


Rendering environments =
There are 2 types of rendering environments.
1. Client-side environment = Code of our web application will be saved on a server at the time
of build. We will get that code from the server and the code will then render on the client device.
2. Server-side environment = Code of our web application will render and not just be saved at the
time of build on the server. We will directly get rendered HTML/UI on the client device.


Component-level rendering =
In a single component, we can do both client as well as server rendering. Meaning we can render
a part of a component on the server side and remaining on the client side. 
For things or parts of our component that will not change or have no event handler (meaning in no
way we can interact with that part), we can render them on the server. The interactive parts
(like a button) are rendered on the client side so the client can interact with that part.

We can do this by creating a different file for the interactive components (here we have to use
"use client" on top) and import these files in the server-side rendering file.


Pre-rendering =
This means generating HTML/UI in advance on the server side. It is made up of 2 parts.

1. Static generation = At build time, both server-side and client-side components will
render at the server side and this render will be reused every time a user requests
for this component.

2. Server-side rendering = Whenever a user requests for this component, it will render
at that time and then be sent to the user's device. This component will not render at
build time but renders when the user requests it.



CSR (Client-Side Rendering)
SSR (Server-Side Rendering)
SSG (Static Site Generation)
ISR (Incremental Static Regeneration)

SSR =
We send all the data to the server at the time of build. Whenever the user requests the
page, the server collects all the data, renders that page and then sends that pre-rendered
page to the client/user. Here browser will show the data as it is. There is no need to render
the data by the browser. (Servers are faster than the client device so rendering on the server
is always faster)

SSG =
Here also server first has to collect the data and then render the page. Even if Servers
are fast they will still take some time to render the page. Like when we are using a slow API,
so here server has to wait for the API to get the data and then render the page, which makes
the website slow even if we use SSR. In this case, we use SSG, where at the time of build
we render the page first and then store it to the server. Now we are storing the whole page to
the server and because of this build time here will be longer. But now whenever a user/client
requests a page the server can directly show/send that pre-built page which will be even
faster. Here server doesn't have to collect data from the API because data will be collected
at the time of build and that data also will be saved in the build file.

ISR =
The main problem with SSG is that the data that we saved at the build time will be the same.
So if we build the page today using SSG and request for that page we will get the same data,
even if we request that data after a month also. But if we want to change that data again
then we have to build the whole website again. And build time in SSG is also very long.
To solve this issue, in ISR static-generation will happen per page, which means now the
website as a whole won't be statically generated but all pages independently will be
statically generated. So now if we want to change something on a single page, we won't
have to build the whole website again but only have to build that single page that we
just changed.
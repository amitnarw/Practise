Ts for arrays =
For arrays ts has a specific syntax.

- const arr: string[] = [];
If we try to assign strings to an array like this
const arr: string = []
it will give error
arr.push(22) = This will give an error, bcoz number cannot be pushed in string type array.

- Readonly
This will prevent an array from being changed.
const arr: readonly string[] = [];
arr.push('new') (Will throw an error here, bcoz we can't add anything in readonly)

- Type inference
If an array already have values, ts can infer it's type of data.
const arr = []
arr.push(22)
console.log(typeof arr[0]) = number

Tuple =
It is a typed array with predefined length and type for each index. useState in react is also tuple.
let tup: [string, number, boolean];
tup = ['new', 22, true];
(This is not recommended when we have more values in an array. In that case we can use type any, or
leave it so that ts can infer it's type.)

If we rearrange it's types and values in wrong order, it will throw an error.
let tup: [string, number, boolean];
tup = [22, 'new', true];

- Readonly tuple
It is good practice to make tuple readonly.
let tup: readonly [string, number, boolean];
tup = ['new', 22, true];

- Named tuple
This will provide context for values at each index.
const tup: [x:number, y:number] = [22, 01]

- Destructuring tuple
let tup: [number, number] = [22, 1]
let [x, y] = tup;